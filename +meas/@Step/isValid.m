function [results, reasons] = isValid(obj)
    %ISVALID Returns true if the object is "Valid".
    %
    %Step is Valid if:
    %   Step.SignalParameters.isValid
    % & all Step.InputSignals.isValid & fulfill StepType.RequiredInputTypes
    % & all Step.OutputSignals.isValid & fulfill StepType.RequiredOutputTypes
    % & size of ExcitationFilters is valid with number of outputs
    %
    %See also: bose.cnc.meas.Step

    % Alex Coleman
    % $Id$

    results = true(size(obj));
    reasons = cell(size(obj)); % Cell array of strings (not char)
    for indObj = 1:numel(obj)
        theseReasons = string.empty;

        % SignalParameters must be Valid
        [tfSignalParameters, reasonsSignalParameters] = obj(indObj).SignalParameters.isValid;
        if ~tfSignalParameters
            results(indObj) = false;
            thisReason = sprintf( ...
                "This Step (%s) has invalid SignalParameters: %s", ...
                obj(indObj).Name, ...
                reasonsSignalParameters{1} ...
            );
            theseReasons = [theseReasons; thisReason];
        end

        % All InputSignals must be Valid
        [tfInputSignals, reasonsInputSignals] = obj(indObj).InputSignals.isValid;
        if ~all(tfInputSignals)
            results(indObj) = false;
            thisReason = sprintf( ...
                "This Step (%s) has invalid InputSignals (%s): %s", ...
                obj(indObj).Name, ...
                strjoin(string(find(~tfInputSignals)), ", "), ...
                strjoin([reasonsInputSignals{~tfInputSignals}], " ") ...
            );
            theseReasons = [theseReasons; thisReason];
        end

        % All OutputSignals must be Valid
        [tfOutputSignals, reasonsOutputSignals] = obj(indObj).OutputSignals.isValid;
        if ~all(tfOutputSignals)
            results(indObj) = false;
            thisReason = sprintf( ...
                "This Step (%s) has invalid OutputSignals (%s): %s", ...
                obj(indObj).Name, ...
                strjoin(string(find(~tfOutputSignals)), ", "), ...
                strjoin(reasonsOutputSignals{~tfOutputSignals}, " ") ...
            );
            theseReasons = [theseReasons; thisReason];
        end

        % Find out if our input signals fulfill StepType.RequiredInputTypes
        inputSignalTypes = [obj(indObj).InputSignals.Type];
        requiredTypes = [obj(indObj).Type.RequiredInputTypes];
        tfInputSignalTypes = false(size(requiredTypes));
        for indType = 1:numel(requiredTypes)
            tfInputSignalTypes(indType) = ismember(requiredTypes(indType), inputSignalTypes);
        end
        if any(~tfInputSignalTypes)
            results(indObj) = false;
            missingTypes = requiredTypes(~tfInputSignalTypes);
            thisReason = sprintf( ...
                "Steps of StepType '%s' require Input Signals of " + ...
                "SignalType '%s'. This Step (%s) is missing Input " + ...
                "Signals of SignalType '%s'.", ...
                obj(indObj).Type, ...
                strjoin(string(requiredTypes), "', '"), ...
                obj(indObj).Name, ...
                strjoin(string(missingTypes), "', '") ...
            );
            theseReasons = [theseReasons; thisReason];
        end

        % Find out if our output signals fulfill StepType.RequiredOutputTypes
        outputSignalTypes = [obj(indObj).OutputSignals.Type];
        requiredTypes = [obj(indObj).Type.RequiredOutputTypes];
        tfOutputSignalTypes = false(size(requiredTypes));
        for indType = 1:numel(requiredTypes)
            tfOutputSignalTypes(indType) = ismember(requiredTypes(indType), outputSignalTypes);
        end
        if any(~tfOutputSignalTypes)
            results(indObj) = false;
            missingTypes = requiredTypes(~tfOutputSignalTypes);
            thisReason = sprintf( ...
                "Steps of StepType '%s' require Output Signals of " + ...
                "SignalType '%s'. This Step (%s) is missing Output " + ...
                "Signals of SignalType '%s'.", ...
                obj(indObj).Type, ...
                strjoin(string(requiredTypes), "', '"), ...
                obj(indObj).Name, ...
                strjoin(string(missingTypes), "', '") ...
            );
            theseReasons = [theseReasons; thisReason];
        end

        % If we have no outputs, ExcitationFilters must be empty, and
        %   ExcitationType must be None
        numOutputs = numel(obj(indObj).OutputSignals);
        if numOutputs == 0
            if ~isempty(obj(indObj).ExcitationFilters) || ...
                    obj(indObj).ExcitationType ~= bose.cnc.meas.ExcitationType.None
                results(indObj) = false;
                thisReason = sprintf( ...
                    "This Step (%s) has non-empty ExcitationFilters or " + ...
                    "an ExcitationType other than None: it must also " + ...
                    "have Output Signals.", ...
                    obj(indObj).Name ...
                );
                theseReasons = [theseReasons; thisReason];
            end

        % If we have outputs, ExcitationType cannot be None
        elseif obj(indObj).ExcitationType == bose.cnc.meas.ExcitationType.None
            results(indObj) = false;
            thisReason = sprintf( ...
                "This Step (%s) cannot have ExcitationType of None with " + ...
                "Output Signals.", ...
                obj(indObj).Name ...
            );
            theseReasons = [theseReasons; thisReason];

        % If we have outputs, ExcitationFilters must be empty or match size
        %   with the number of Output Signals
        elseif ~isempty(obj(indObj).ExcitationFilters) && size(obj(indObj).ExcitationFilters, 3) ~= numOutputs
            results(indObj) = false;
            thisReason = sprintf( ...
                "This Step (%s) must have size(ExcitationFilters, 3) " + ...
                "(%.0f) equal to the number of Output Signals (%.0f).", ...
                obj(indObj).Name, ...
                size(obj(indObj).ExcitationFilters, 3), ...
                numOutputs ...
            );
            theseReasons = [theseReasons; thisReason];

        % If ExcitationType is External, ExcitationFilters must be empty
        elseif ~isempty(obj(indObj).ExcitationFilters) && obj(indObj).ExcitationType == bose.cnc.meas.ExcitationType.External
            results(indObj) = false;
            thisReason = sprintf( ...
                "This Step (%s) cannot have ExcitationFilters with an " + ...
                "ExcitationType of External.", ...
                obj(indObj).Name ...
            );
            theseReasons = [theseReasons; thisReason];
        end

        reasons{indObj} = theseReasons;
    end % for every object
end % function
