function objKeys = saveToDatabase(obj)
    %SAVETODATABASE Saves each Step through a database connection.
    %
    %   If there is a duplicate object, this method will return the key of the
    %   original record instead of creating a new object in the Database.
    %
    %   The SqlClient must be connected.
    %
    %Returns:
    %   objKeys (int32): Table Key for the stored Step.
    %
    %See also: bose.cnc.meas.Step, bose.cnc.datastore.SqlClient,
    %   bose.cnc.meas.Step.loadFromDatabase

    % Alex Coleman
    % $Id$

    idHeader = 'bose:cnc:meas:Step:saveToDatabase:';

    sqlClient = bose.cnc.datastore.SqlClient.start;

    storedProcedureName = sprintf( ...
        '%s.WH.GetStepKey', ...
        sqlClient.DatabaseName ...
    );

    nargoutchk(0, 1);

    % Loop over every Step given
    objKeys = int32(zeros(numel(obj), 1));
    [objValid, objReasons] = obj.isValid;

    for indObj = 1:numel(obj)

        if ~objValid(indObj)
            warning( ...
                [idHeader 'InvalidStep'], ...
                strjoin([objReasons{indObj}], '\n') ...
            );
            objKeys(indObj) = int32(0);
            continue
        end

        % Upload the SignalParameters, or get the key if it already exists
        signalParametersKey = obj(indObj).SignalParameters.saveToDatabase;

        % Generate the ExcitationFilters base64 string
        if isempty(obj(indObj).ExcitationFilters)
            excitationFilters = 'NULL';
        else
            excitationFilters = sprintf( ...
                '''%s''', ...
                bose.cnc.datastore.encodeBase64(obj(indObj).ExcitationFilters(:)) ...
            );
        end

        % Save the Signals first
        try
            % HACK(ALEX): Input signals will always be ordered first in this case
            signalKeys = [ ...
                    obj(indObj).InputSignals.saveToDatabase; ...
                        obj(indObj).OutputSignals.saveToDatabase ...
                    ];
        catch ME

            if strcmp(ME.identifier, 'database:database:JDBCDriverError')
                warning( ...
                    [idHeader 'UploadSignalsFailed'], ...
                    [ ...
                        'The Signals for this Step (%d of %d) failed to be ' ...
                        'uploaded. %s' ...
                    ], ...
                    indObj, ...
                    numel(obj), ...
                    sqlClient.Message ...
                );
                objKeys(indObj) = int32(0);
                continue
            else
                rethrow(ME);
            end

        end

        signalKeyString = strjoin(string(signalKeys), ',');

        fetchString = sprintf( ...
            "EXECUTE %s %.0f, '%s', '%s', %s, '%s', '%s', %.0f, %.0f, '%s'", ...
            storedProcedureName, ...
            signalParametersKey, ...
            obj(indObj).Name, ...
            string(obj(indObj).Type), ...
            excitationFilters, ...
            bose.cnc.datastore.encodeBase64(obj(indObj).ExcitationGain), ...
            string(obj(indObj).ExcitationType), ...
            obj(indObj).LoopOverFits, ...
            obj(indObj).SaveTimeData, ...
            signalKeyString ...
        );

        %TODO(ALEX): Once we know what errIDs typically pop out of the DB, we can catch them and continue.
        try
            objKeyTable = sqlClient.fetch(fetchString);

            if ismember('ErrorProcedure', objKeyTable.Properties.VariableNames)
                warning( ...
                    [idHeader 'StoredProcedureError'], ...
                    '%s (line %.0f): %s', ...
                    string(objKeyTable.ErrorProcedure), ...
                    objKeyTable.ErrorLine, ...
                    string(objKeyTable.ErrorMessage) ...
                );
                objKey = int32(0);
            else % if no exception
                objKey = int32(objKeyTable.StepKey);
            end

        catch ME

            if strcmp(ME.identifier, 'database:database:JDBCDriverError')
                warning( ...
                    [idHeader 'UploadFailed'], ...
                    'This Step (%d of %d) failed to be uploaded. %s', ...
                    indObj, ...
                    numel(obj), ...
                    sqlClient.Message ...
                );
                objKey = int32(0);
            else
                rethrow(ME);
            end

        end

        objKeys(indObj) = objKey;
    end % For every object to upload

end % saveToDatabase
