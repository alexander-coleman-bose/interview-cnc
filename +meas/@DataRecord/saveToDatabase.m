function objKeys = saveToDatabase(obj)
    %SAVETODATABASE Saves each DataRecord through a database connection.
    %
    %   If there is a duplicate object, this method will return the key of the
    %   original record instead of creating a new object in the Database.
    %
    %   The SqlClient must be connected, and the S3Client must be initialized.
    %
    %Returns:
    %   objKeys (int32): Table Key for the stored DataRecord.
    %
    %See also: bose.cnc.meas.DataRecord, bose.cnc.datastore.SqlClient,
    %   bose.cnc.datastore.S3Client, bose.cnc.meas.DataRecord.loadFromDatabase

    % Alex Coleman
    % $Id$

    idHeader = 'bose:cnc:meas:DataRecord:saveToDatabase:';
    logger = bose.cnc.logging.getLogger;

    sqlClient = bose.cnc.datastore.SqlClient.start;
    s3Client = bose.cnc.datastore.S3Client.start;

    storedProcedureName = sprintf( ...
        '%s.WH.GetDataRecordKey', ...
        sqlClient.DatabaseName ...
    );

    % Loop over every DataRecord given
    objKeys = int32(zeros(numel(obj), 1));
    for indObj = 1:numel(obj)
        if ~obj(indObj).isValid
            logger.warning(sprintf( ...
                [ ...
                    'This DataRecord (%d of %d) was invalid and will not ' ...
                    'be uploaded to the database.' ...
                ], ...
                indObj, ...
                numel(obj) ...
            ));
            objKeys(indObj) = int32(0);
            continue
        end

        environmentKey = obj(indObj).Environment.saveToDatabase;
        if isempty(environmentKey)
            environmentString = 'NULL';
        else
            environmentString = sprintf('%.0f', environmentKey);
        end

        hardwareKey = obj(indObj).Hardware.saveToDatabase;

        headphoneKey = obj(indObj).Headphone.saveToDatabase;
        if isempty(headphoneKey)
            headphoneString = 'NULL';
        else
            headphoneString = sprintf('%.0f', headphoneKey);
        end

        operatorKey = obj(indObj).Operator.saveToDatabase;

        signalParametersKey = ...
            obj(indObj).SignalParameters.saveToDatabase;

        subjectKey = obj(indObj).Subject.saveToDatabase;
        if isempty(subjectKey)
            subjectString = 'NULL';
        else
            subjectString = sprintf('%.0f', subjectKey);
        end

        % Store the XsData in the storage-efficient form (serialized singles)
        xsDataKey = local_saveXsData( ...
            sqlClient, ...
            s3Client, ...
            obj(indObj).XsData ...
        );

        % Convert datetime to correct format
        dateString = string(obj(indObj).Date, sqlClient.DatetimeSendFormat);

        if isempty(obj(indObj).ExcitationFilters)
            excitationFilters = 'NULL';
        else
            excitationFilters = sprintf( ...
                '''%s''', ...
                bose.cnc.datastore.encodeBase64(obj(indObj).ExcitationFilters(:)) ...
            );
        end

        fetchString = sprintf( ...
            "EXECUTE %s %s, %.0f, %s, %.0f, %.0f, %s, %.0f, '%s', %s, '%s', '%s', %.0f, '%s', '%s', '%s'", ...
            storedProcedureName, ...
            environmentString, ...
            hardwareKey, ...
            headphoneString, ...
            operatorKey, ...
            signalParametersKey, ...
            subjectString, ...
            xsDataKey, ...
            dateString, ...
            excitationFilters, ...
            bose.cnc.datastore.encodeBase64(obj(indObj).ExcitationGain), ...
            string(obj(indObj).ExcitationType), ...
            obj(indObj).Fit, ...
            obj(indObj).StepName, ...
            string(obj(indObj).StepType), ...
            obj(indObj).ToolboxVersion ...
        );

        %TODO(ALEX): Once we know what errIDs typically pop out of the DB, we can catch them and continue.
        try
            logger.debug(sprintf('%s:fetchString => %s', idHeader, fetchString));
            objKeyTable = sqlClient.fetch(fetchString);
            if ismember('ErrorProcedure', objKeyTable.Properties.VariableNames)
                logger.warning(sprintf( ...
                    '%s (line %.0f): %s', ...
                    string(objKeyTable.ErrorProcedure), ...
                    objKeyTable.ErrorLine, ...
                    string(objKeyTable.ErrorMessage) ...
                ));
                objKey = int32(0);
            else % if no exception
                objKey = int32(objKeyTable.DataRecordKey);
            end

            local_saveMappingXrefKey( ...
                sqlClient, ...
                objKey, ...
                obj(indObj).InputMapping, ...
                obj(indObj).OutputMapping ...
            );

            logger.info(sprintf( ...
                'Wrote DataRecord #%d (%d of %d) to %s', ...
                objKey, ...
                indObj, ...
                numel(obj), ...
                sqlClient.DatabaseName ...
            ));
        catch ME
            if strcmp(ME.identifier, 'database:database:JDBCDriverError')
                logger.warning(sprintf( ...
                    'This DataRecord (%d of %d) failed to be uploaded. %s', ...
                    indObj, ...
                    numel(obj), ...
                    sqlClient.Message ...
                ));
                objKey = int32(0);
            else
                logger.error(sprintf('%s', ME.message), ME);
            end
        end

        objKeys(indObj) = objKey;
    end % For every object to upload
end % saveToDatabase

function objKey = local_saveXsData(sqlClient, s3Client, xsData)
    idHeader = 'bose:cnc:meas:DataRecord:saveToDatabase:';
    logger = bose.cnc.logging.getLogger;

    % Store the XsData signal onto s3
    savedFile = s3Client.save(xsData);
    if isempty(savedFile)
        logger.warning(sprintf( ...
            [ ...
                'MATLAB is not connected to the specified S3 bucket. ' ...
                'Upload failed.' ...
            ] ...
        ));
        objKey = int32(0);
        return
    end

    storedProcedureName = sprintf( ...
        '%s.WH.GetXsDataKey', ...
        sqlClient.DatabaseName ...
    );

    fetchString = sprintf( ...
        "EXECUTE %s '%s'", ...
        storedProcedureName, ...
        savedFile ...
    );

    %TODO(ALEX): Once we know what errIDs typically pop out of the DB, we can catch them and continue.
    try
        logger.debug(sprintf('%s:fetchString => %s', idHeader, fetchString));
        objKeyTable = sqlClient.fetch(fetchString);
        if ismember('ErrorProcedure', objKeyTable.Properties.VariableNames)
            logger.warning(sprintf( ...
                '%s (line %.0f): %s', ...
                string(objKeyTable.ErrorProcedure), ...
                objKeyTable.ErrorLine, ...
                string(objKeyTable.ErrorMessage) ...
            ));
            objKey = int32(0);
        else % if no exception
            objKey = int32(objKeyTable.XsDataKey);
        end
    catch ME
        if strcmp(ME.identifier, 'database:database:JDBCDriverError')
            logger.warning(sprintf( ...
                'This XsData failed to be uploaded. %s', ...
                sqlClient.Message ...
            ));
            objKey = int32(0);
        else
            logger.error(sprintf('%s', ME.message), ME);
        end
    end
end % local_saveXsData

function local_saveMappingXrefKey(sqlClient, dataRecordKey, inputMappingArray, outputMappingArray)
    idHeader = 'bose:cnc:meas:DataRecord:saveToDatabase:';
    logger = bose.cnc.logging.getLogger;

    % Store the Mapping array.
    inputMappingKeys = inputMappingArray.saveToDatabase;
    outputMappingKeys = outputMappingArray.saveToDatabase;
    mappingKeys = [inputMappingKeys; outputMappingKeys];
    mappingKeyOutputMask = [ ...
        false(size(inputMappingKeys)); ...
        true(size(outputMappingKeys)) ...
    ];

    % Create the cross-reference for every property
    objKeys = int32(zeros(numel(mappingKeys), 1));
    procedureName = sprintf( ...
        '%s.WH.GetDataRecordMappingXrefKey', ...
        sqlClient.DatabaseName ...
    );
    for indKey = 1:numel(mappingKeys)
        fetchString = sprintf( ...
            "EXECUTE %s %.0f, %.0f, %.0f", ...
            procedureName, ...
            dataRecordKey, ...
            mappingKeys(indKey), ...
            double(mappingKeyOutputMask(indKey)) ...
        );
        try
            logger.debug(sprintf('%s:fetchString => %s', idHeader, fetchString));
            objKeyTable = sqlClient.fetch(fetchString);
            if ismember('ErrorProcedure', objKeyTable.Properties.VariableNames)
                logger.warning(sprintf( ...
                    '%s (line %.0f): %s', ...
                    string(objKeyTable.ErrorProcedure), ...
                    objKeyTable.ErrorLine, ...
                    string(objKeyTable.ErrorMessage) ...
                ));
                objKey = int32(0);
            else % if no exception
                objKey = int32(objKeyTable.DataRecordMappingXrefKey);
            end
        catch ME
            if strcmp(ME.identifier, 'database:database:JDBCDriverError')
                logger.warning(sprintf( ...
                    [ ...
                        'This DataRecordMappingXrefKey (%d of %d) failed ' ...
                        'to be uploaded. %s' ...
                    ], ...
                    indKey, numel(mappingKeys), sqlClient.Message ...
                ));
                objKey = int32(0);
            else
                logger.error(sprintf('%s', ME.message), ME);
            end
        end

        objKeys(indKey) = objKey;
        %TODO(ALEX): If an object fails to upload or is invalid, its key will be zero in this array.
    end % For every object to upload
end % local_saveMappingXrefKey
