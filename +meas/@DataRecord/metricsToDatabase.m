function trialKeys = metricsToDatabase(dataRecords, varargin)
    %METRICSTODATABASE Uploads a set of metrics derived from a set of DataRecords.
    %
    %   This method uploads the given DataRecords, calculates a set of metrics
    %   from those DataRecords, then uploads those metrics as Trials to the
    %   database, with the Trials linked to the DataRecords using an XRef table.
    %
    %   If the DataRecords are already uploaded, duplicates will not be
    %   uploaded. If there is a duplicate metric, this method will return the
    %   key of the original record instead of creating a new metric in the
    %   Database.
    %
    %   The SqlClient must be connected, and the S3Client must be initialized.
    %
    %   metricsToDatabase can also accept inputs as a struct with fieldnames
    %   that match the input argument names.
    %
    %Parameter Arguments:
    %   groupDescription (char): Trial group description. (Default: 'NULL')
    %   inputUnits (char, max size = 10): Input signal units (e.g. 'V').
    %   outputUnits (char, max size = 10): Output signal units.
    %
    %Returns:
    %   trialKeys (int32): Trial Keys for the stored metrics.
    %
    %See also: bose.cnc.meas.DataRecord,
    %   bose.cnc.datastore.SqlClient,
    %   bose.cnc.datastore.S3Client,
    %   bose.cnc.meas.DataRecord.gsd,
    %   bose.cnc.meas.DataRecord.gcd,
    %   bose.cnc.meas.DataRecord.nso,
    %   bose.cnc.meas.DataRecord.nco,
    %   bose.cnc.meas.DataRecord.ncs,
    %   bose.cnc.meas.DataRecord.coh_co,
    %   bose.cnc.meas.DataRecord.coh_cs,
    %   bose.cnc.meas.DataRecord.rcr_open,
    %   bose.cnc.meas.DataRecord.rcr_pass

    % Janet L. Xu
    % $Id$

    msgIdHeader = sprintf('bose:cnc:meas:DataRecord:%s:', mfilename);

    parser = inputParser;
    parser.addParameter('tgDescription', 'NULL', @bose.common.validators.mustBeStringLike);
    parser.addParameter('inputUnits', 'NULL', @bose.common.validators.mustBeStringLike);
    parser.addParameter('outputUnits', 'NULL', @bose.common.validators.mustBeStringLike);
    parser.parse(varargin{:});

    sqlClient = bose.cnc.datastore.SqlClient.start;

    storedProcedureName = sprintf( ...
        '%s.FR.StoreHeadphoneUserData', ...
        sqlClient.DatabaseName ...
    );
    storedProcedureXRefName = sprintf( ...
        '%s.WH.GetDataRecordTrialXRefKey', ...
        sqlClient.DatabaseName ...
    );

    % Calculate metrics
    metrics.gsd = dataRecords.gsd;
    metrics.gcd = dataRecords.gcd;
    metrics.nso = dataRecords.nso;
    metrics.nco = dataRecords.nco;
    metrics.ncs = dataRecords.ncs;
    metrics.coh_co = dataRecords.coh_co;
    metrics.coh_cs = dataRecords.coh_cs;
    metrics.rcr_open = dataRecords.rcr_open;
    metrics.rcr_pass = dataRecords.rcr_pass;
    metric_names = fieldnames(metrics);

    % Upload the DataRecords, or get their keys if they have already been
    %   uploaded.
    dataRecordKeys = dataRecords.saveToDatabase;

    % Loop over every DataRecord given
    trialKeys = int32(zeros(numel(dataRecords), numel(metric_names)));

    for i_dataRec = 1:numel(dataRecords)
        singleDataRec = dataRecords(i_dataRec);
        tDataRecordStart = tic;
        fprintf( ...
            'Uploading DataRecord metrics (%d of %d)...', ...
            i_dataRec, ...
            numel(dataRecords) ...
        );

        % Loop over every metric for that DataRecord entry
        for i_metric = 1:numel(metric_names)
            thisMetric = metric_names{i_metric};

            % Get number of metrics in that metric type
            nSig = size([metrics.(thisMetric)(i_dataRec).data], 2);

            % Loop over every signal in that metric
            for i_sig = 1:nSig

                % Save to database only if metric exists
                if isempty(metrics.(thisMetric)(i_dataRec).data)
                    continue
                end % If metric exists

                % Hard code metadata
                projectName = singleDataRec.Headphone.Type.Project;
                headphoneType = singleDataRec.Headphone.Type.Name;
                person = [char(singleDataRec.Subject.FirstName) ' ' char(singleDataRec.Subject.LastName)];
                headphoneName = singleDataRec.Headphone.Name;
                tgDescription = parser.Results.tgDescription;
                trialDate = string(singleDataRec.Date, sqlClient.DatetimeSendFormat);
                fitNum = singleDataRec.Fit;
                side = singleDataRec.InputMapping(1).Signal.Side; %HACK(ALEX): This only takes into account the side of the first signal. TODO: Redo placement of 'side' in DataRecord.
                inputUnits = parser.Results.inputUnits;
                outputUnits = parser.Results.outputUnits;
                fileName = singleDataRec.FileName;
                sigDescription = metrics.(thisMetric)(i_dataRec).signals(i_sig);

                % Upload metric metadata - get trial key(s)
                fetchString = sprintf( ...
                "EXECUTE %s '%s', '%s', '%s', '%s', '%s', '%s', '%.0f', '%s', '%s', '%s', '%s', '%s', '%s'", ...
                    storedProcedureName, ...
                    projectName, ...
                    headphoneType, ...
                    person, ...
                    headphoneName, ...
                    tgDescription, ...
                    trialDate, ...
                    fitNum, ...
                    side, ...
                    thisMetric, ...
                    inputUnits, ...
                    outputUnits, ...
                    fileName, ...
                    sigDescription ...
                );

                try
                    rs = sqlClient.fetch(fetchString);
                    trialKey = int32(rs.TrialKey);
                    trialKeys(i_dataRec, i_metric) = trialKey;
                catch ME

                    if strcmp(ME.identifier, 'database:database:JDBCDriverError')
                        warning( ...
                            [msgIdHeader 'UploadFailed'], ...
                            [ ...
                                'This DataRecord metric %s (%d of %d) ' ...
                                'failed to be uploaded. %s' ...
                            ], ...
                            thisMetric, ...
                            i_dataRec, ...
                            numel(dataRecords), ...
                            sqlClient.Message ...
                        );
                        continue
                    else
                        rethrow(ME);
                    end

                end

                fprintf('%s...', thisMetric);

                % GetDataRecordTrialXRefKey, if DataRecordKey provided
                if dataRecordKeys(i_dataRec)
                    fetchXRefString = sprintf( ...
                        "EXECUTE %s %.0f, %.0f", ...
                        storedProcedureXRefName, ...
                        dataRecordKeys(i_dataRec), ...
                        trialKey ...
                    );

                    try
                        objKeyTable = sqlClient.fetch(fetchXRefString);
                    catch ME

                        if strcmp(ME.identifier, 'database:database:JDBCDriverError')

                            warning( ...
                                [msgIdHeader 'UploadFailed'], ...
                                [ ...
                                    'This DataRecordTrialXrefKey (%.0f, ' ...
                                    '%.0f) failed to be uploaded. %s' ...
                                ], ...
                                dataRecordKeys(i_dataRec), ...
                                trialKey, ...
                                sqlClient.Message ...
                            );
                        else
                            rethrow(ME);
                        end

                    end

                end % if DataRecord keys are provided

                % Check if TrialKey already exists
                storedProcTrial = sprintf( ...
                "EXECUTE FR.checkTrialKey '%.0f'", ...
                    trialKey ...
                );
                rs = sqlClient.fetch(storedProcTrial);
                status = rs.Status;

                if status == 0
                    % Upload response data
                    tableName = sprintf( ...
                    '%s.FR.ResponseData', ...
                        sqlClient.DatabaseName ...
                    );
                    batchSize = 500;
                    numberOfBatches = max(floor(numel(singleDataRec.SignalParameters.Frequencies) / batchSize), 1);

                    for indBatch = 1:numberOfBatches
                        indStart = (indBatch - 1) * batchSize + 1;
                        indEnd = indBatch * batchSize;

                        if indBatch == numberOfBatches
                            batchFrequencies = singleDataRec.SignalParameters.Frequencies(indStart:end);
                            batchSignals = metrics.(thisMetric)(i_dataRec).data(indStart:end, i_sig);
                        else
                            batchFrequencies = singleDataRec.SignalParameters.Frequencies(indStart:indEnd);
                            batchSignals = metrics.(thisMetric)(i_dataRec).data(indStart:indEnd, i_sig);
                        end

                        %HACK(ALEX): Precision is being lost when converting to string.
                        insertString = sprintf( ...
                        'INSERT INTO %s VALUES%s', ...
                            tableName, ...
                            strjoin( ...
                            arrayfun( ...
                            @(x, y) string(sprintf( ...
                            '(%.0f, %f, %f, %f)', ...
                            trialKey, ...
                            x, ...
                            real(y), ...
                            imag(y) ...
                        )), ...
                            batchFrequencies, batchSignals ...
                        ), ...
                            ',' ...
                        ) ...
                        );

                        try
                            sqlClient.execute(insertString);
                            % fprintf( ...
                            %     '%s Batch (%.0f of %.0f) uploaded.\n', ...
                            %     metric_names{i_metric}, ...
                            %     indBatch + numberOfBatches * (indSignal - 1), ...
                            %     numberOfBatches * numSignals ...
                            % );
                        catch ME

                            if strcmp(ME.identifier, 'database:database:JDBCDriverError')
                                warning( ...
                                    [msgIdHeader 'UploadFailed'], ...
                                    [ ...
                                        'This ResponseData metric %s (%d ' ...
                                        'of %d) failed to be uploaded. %s' ...
                                    ], ...
                                    thisMetric, ...
                                    indBatch, ...
                                    numberOfBatches, ...
                                    sqlClient.Message ...
                                );
                            else
                                rethrow(ME);
                            end

                        end % Try to execute

                    end % For every batch

                elseif (status == 1)
                    fprintf(2, 'Already exists, skipping...');
                else
                    error( ...
                        [msgIdHeader 'QueryFailed'], ...
                        'Query returned error status, something has gone wrong.' ...
                    );
                end % Check if TrialKey exists

            end % For every signal to upload

        end % For every metric to upload

        tDataRecordTotal = toc(tDataRecordStart);
        fprintf('DONE (%.3f seconds)\n', tDataRecordTotal);
    end % For every DataRecord object

end % metricsToDatabase
