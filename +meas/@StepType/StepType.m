classdef StepType
    %STEPTYPE Enum for types of measurement Steps, defines required SignalType(s).
    %
    %Enumeration members:
    %   Driver Measurements:
    %       Driver (sdvr): Noise from the Headphone, canal mics in, Headphone worn
    %       Coupling (sgod): Noise from the Headphone, canal mics in, Headphone worn
    %       Fit (sfit): Noise from the Headphone, canal mics out, Headphone worn
    %
    %   Room Noise Measurements:
    %       NoiseActive (sactive): Noise from the environment, canal mics in, Headphone worn, filters active
    %       NoiseOpen (sopen): Noise from the environment, canal mics in, no Headphone
    %       NoisePassive (spas): Noise from the environment, canal mics in, Headphone worn, filters off
    %       Nso (snso): Noise from the environment, Headphone worn, filters off
    %
    %   None:
    %       Generic (generic): The default StepType, a generic measurement.
    %
    %   Voice Measurements:
    %       VoiceActive (svactive): Voice from the subject, canal mics in, Headphone worn, filters active
    %       VoiceOpen (svopen): Voice from the subject, canal mics in, no Headphone
    %       VoicePassive (svpas): Voice from the subject, canal mics in, Headphone worn, filters off
    %
    %See also: bose.cnc.meas, bose.cnc.meas.SignalType, bose.cnc.meas.DataRecord,
    %   bose.cnc.meas.Step, bose.cnc.meas.StepType.fromLabel

    % Alex Coleman
    % $Id$

    %% PROPERTIES
    properties
        Label(1,1) string = string % The legacy name for the measurement type (i.e. sdvr, spas, sopen, ...).
        RequiredInputTypes(:,1) bose.cnc.meas.SignalType = bose.cnc.meas.SignalType.empty % The input SignalType(s) required for this type of measurement.
        RequiredOutputTypes(:,1) bose.cnc.meas.SignalType = bose.cnc.meas.SignalType.empty % The output SignalType(s) required for this type of measurement.
    end % Public properties

    %% METHODS
    methods
        function obj = StepType(stepTypeLabel, requiredInputTypes, requiredOutputTypes)
            obj.Label = stepTypeLabel;
            obj.RequiredInputTypes = requiredInputTypes;
            obj.RequiredOutputTypes = requiredOutputTypes;
        end % Constructor

        results = eq(obj, comparisonObj)
        results = ne(obj, comparisonObj)
        varargout = sort(obj, varargin)
    end % Public methods

    methods (Static)
        obj = fromLabel(stepLabel)
    end % Public, static methods

    %% ENUMERATION
    enumeration
        Driver( ...
            "sdvr", ...
            [ ...
                bose.cnc.meas.SignalType.CanalMic, ...
                bose.cnc.meas.SignalType.DriverLoopback, ...
                bose.cnc.meas.SignalType.FeedbackMic ...
            ], ...
            bose.cnc.meas.SignalType.DriverOutput ...
        )
        Coupling( ...
            "sgod", ...
            [ ...
                bose.cnc.meas.SignalType.DriverLoopback, ...
                bose.cnc.meas.SignalType.FeedForwardMic ...
            ], ...
            bose.cnc.meas.SignalType.DriverOutput ...
        )
        Fit( ...
            "sfit", ...
            [ ...
                bose.cnc.meas.SignalType.DriverLoopback, ...
                bose.cnc.meas.SignalType.FeedbackMic ...
            ], ...
            bose.cnc.meas.SignalType.DriverOutput ...
        )
        Generic( ...
            "generic", ...
            bose.cnc.meas.SignalType.empty, ...
            bose.cnc.meas.SignalType.empty ...
        )
        NoiseActive( ...
            "sactive", ...
            [ ...
                bose.cnc.meas.SignalType.CanalMic, ...
                bose.cnc.meas.SignalType.ReferenceMic ...
            ], ...
            bose.cnc.meas.SignalType.RoomOutput ...
        )
        NoiseOpen( ...
            "sopen", ...
            [ ...
                bose.cnc.meas.SignalType.CanalMic, ...
                bose.cnc.meas.SignalType.ReferenceMic ...
            ], ...
            bose.cnc.meas.SignalType.RoomOutput ...
        )
        NoisePassive( ...
            "spas", ...
            [ ...
                bose.cnc.meas.SignalType.CanalMic, ...
                bose.cnc.meas.SignalType.FeedForwardMic, ...
                bose.cnc.meas.SignalType.ReferenceMic ...
            ], ...
            bose.cnc.meas.SignalType.RoomOutput ...
        )
        Nso( ...
            "snso", ...
            [ ...
                bose.cnc.meas.SignalType.FeedbackMic, ...
                bose.cnc.meas.SignalType.FeedForwardMic ...
            ], ...
            bose.cnc.meas.SignalType.RoomOutput ...
        );
        VoiceActive( ...
            "svactive", ...
            [ ...
                bose.cnc.meas.SignalType.CanalMic, ...
                bose.cnc.meas.SignalType.ReferenceMic ...
            ], ...
            bose.cnc.meas.SignalType.empty ...
        )
        VoiceOpen( ...
            "svopen", ...
            [ ...
                bose.cnc.meas.SignalType.CanalMic, ...
                bose.cnc.meas.SignalType.ReferenceMic ...
            ], ...
            bose.cnc.meas.SignalType.empty ...
        )
        VoicePassive( ...
            "svpas", ...
            [ ...
                bose.cnc.meas.SignalType.CanalMic, ...
                bose.cnc.meas.SignalType.FeedForwardMic, ...
                bose.cnc.meas.SignalType.ReferenceMic ...
            ], ...
            bose.cnc.meas.SignalType.empty ...
        )
    end % Enumeration
end % classdef
